// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  imageUrl  String?
  articles  Articles[]
  comments  Comments[]
  likes     Likes[]
  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

}

//  Article model that allows for the creation of articles
model Articles {
  id        String   @id @default(cuid())
  title     String
  content   String
  featuredImage  String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comments[]
  likes     Likes[]
  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt
}

//  Comment model that allows for the creation of comments
model Comments {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  article   Articles @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt
}

//  Like model that allows for the creation of likes
model Likes {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  article   Articles @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt
  @@unique([authorId, articleId]) // This ensures that a user can only like an article once
} 

